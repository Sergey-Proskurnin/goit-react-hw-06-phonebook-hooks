{"version":3,"sources":["components/ElementContactList/ElementContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ElementContactList/ElementContactList.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsAction","addContact","createAction","payload","name","number","id","uuidv4","deleteContact","changeFilter","initialState","ContactForm","useState","state","setState","contacts","useSelector","items","dispatch","useDispatch","nameInputId","numberInputId","handleChange","e","currentTarget","value","prev","addNoRepeatContact","some","toLowerCase","alert","onSubmit","className","s","form","preventDefault","htmlFor","span","input","type","onChange","pattern","title","required","button","filterInputId","Filter","filter","target","ElementContactList","normalizedFilter","trim","contact","includes","getVisibleContacts","map","item","btnList","onClick","ContactList","list","Container","children","container","App","createReducer","contactsTest","action","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.86724177.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ElementContactList_item__3RYkR\",\"span\":\"ElementContactList_span__26DFz\",\"btnList\":\"ElementContactList_btnList__XvyVh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2zfDS\",\"span\":\"Filter_span__32SKR\",\"input\":\"Filter_input__2oHXl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__dAzq2\",\"title\":\"Container_title__2LjOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__KFO9g\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    name,\n    number,\n    id: uuidv4(),\n  },\n}));\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsAction = { addContact, deleteContact, changeFilter };\nexport default contactsAction;\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport s from './ContactForm.module.css';\nimport contactsAction from 'redux/contacts/contacts-actions';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nfunction ContactForm() {\n  const [state, setState] = useState(initialState);\n\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) =>\n    dispatch(contactsAction.addContact(name, number));\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const reset = () => {\n    setState(prev => ({\n      ...prev,\n      name: '',\n      number: '',\n    }));\n  };\n\n  const addNoRepeatContact = (state, contacts) => {\n    const { name, number } = state;\n    if (\n      contacts.some(\n        contacts => contacts.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some(contacts => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    onSubmit(state);\n    reset();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addNoRepeatContact(state, contacts);\n  };\n  const { name, number } = state;\n\n  return (\n    <>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId} className=\"lable\">\n          <span className={s.span}>Name</span>\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            id={nameInputId}\n          />\n        </label>\n\n        <label htmlFor={numberInputId} className=\"lable\">\n          <span className={s.span}>Number</span>\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id={numberInputId}\n          />\n        </label>\n\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport contactsAction from 'redux/contacts/contacts-actions';\n\nimport s from './Filter.module.css';\n\nconst filterInputId = uuidv4();\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n  const onChangeFilter = e =>\n    dispatch(contactsAction.changeFilter(e.target.value));\n\n  return (\n    <label htmlFor={filterInputId}>\n      <span className={s.span}>Find contacts by name and number</span>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        id={filterInputId}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChangeFilter: PropTypes.func,\n};\n\nexport default Filter;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport s from './ElementContactList.module.css';\r\nimport contactsAction from 'redux/contacts/contacts-actions';\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(\r\n    contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter) ||\r\n      contact.number.includes(filter),\r\n  );\r\n};\r\n\r\nconst ElementContactList = () => {\r\n  const contacts = useSelector(({ contacts: { items, filter } }) =>\r\n    getVisibleContacts(items, filter),\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return contacts.map(({ name, number, id }) => {\r\n    return (\r\n      <li className={s.item} key={id}>\r\n        <span className={s.span}></span>\r\n        {name}: {number}\r\n        <button\r\n          type=\"button\"\r\n          className={s.btnList}\r\n          onClick={() => dispatch(contactsAction.deleteContact(id))}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\nElementContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  deleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ElementContactList;\r\n","import React from 'react';\n\nimport ElementContactList from 'components/ElementContactList';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  return (\n    <ul className={s.list}>\n      <ElementContactList />\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport s from './Container.module.css';\n\nconst Container = ({ children, title }) => (\n  <div className={s.container}>\n    <h1 className={s.title}>{title}</h1>\n    {children}\n  </div>\n);\n\nexport default Container;\n","import React from 'react';\n\nimport './App.css';\n\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Container from 'components/Container';\n\nconst App = () => {\n  \n  return (\n    <Container title=\"Phonebook\">\n      <ContactForm />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsAction from './contacts-actions';\nimport contactsTest from 'data/contactsTest.json';\n\nconst items = createReducer(contactsTest, {\n  [contactsAction.addContact]: (state, action) => [action.payload, ...state],\n  [contactsAction.deleteContact]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\nconst filter = createReducer('', {\n  [contactsAction.changeFilter]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import contactsReducer from './contacts/contacts-reducer';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n//----------------test-middleware--------------------------\n// const myMiddleware = store => next => action => {\n//   console.log('Hello i am myMiddleware');\n//   next(action)\n// }\n// const myMiddlewareTwo = store => next => action => {\n//   console.log('Hello i am myMiddlewareTwo');\n//   next(action)\n// }\n//-------------------------------------------------------------\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // myMiddleware,\n  //  myMiddlewareTwo\n];\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(persistConfig, contactsReducer) },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\nexport { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from 'redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1ivGK\",\"input\":\"ContactForm_input__2Kk3H\",\"span\":\"ContactForm_span__1xfyH\",\"button\":\"ContactForm_button__2ck_f\"};"],"sourceRoot":""}